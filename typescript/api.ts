/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 勤怠管理API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://mitei.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Employee
 */
export interface Employee {
    /**
     * 姓と名の間には半角スペースを設ける 
     * @type {string}
     * @memberof Employee
     */
    fullName: string;
    /**
     * 性別
     * @type {string}
     * @memberof Employee
     */
    gender: Employee.GenderEnum;
    /**
     * 誕生日   ISO 8601のYYYY-MM-DD形式 
     * @type {string}
     * @memberof Employee
     */
    birthday: string;
    /**
     * 役割
     * @type {string}
     * @memberof Employee
     */
    position: Employee.PositionEnum;
}

/**
 * @export
 * @namespace Employee
 */
export namespace Employee {
    /**
     * @export
     * @enum {string}
     */
    export enum GenderEnum {
        MALE = <any> 'MALE',
        FEMALE = <any> 'FEMALE',
        NEITHER = <any> 'NEITHER',
        NOTANSWER = <any> 'NOT_ANSWER'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum PositionEnum {
        FULLTIME = <any> 'FULL_TIME',
        PARTTIME = <any> 'PART_TIME'
    }
}
/**
 * 
 * @export
 * @interface Employees
 */
export interface Employees extends Array<Employee> {
}
/**
 * EmployeeApi - fetch parameter creator
 * @export
 */
export const EmployeeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 従業員リストを取得
         * @summary 従業員リストを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/employees`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 従業員リストを取得
         * @summary 従業員リストを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Employees> {
            const localVarFetchArgs = EmployeeApiFetchParamCreator(configuration).apiEmployeesGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 従業員リストを取得
         * @summary 従業員リストを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesGet(options?: any) {
            return EmployeeApiFp(configuration).apiEmployeesGet(options)(fetch, basePath);
        },
    };
};

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * 従業員リストを取得
     * @summary 従業員リストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public apiEmployeesGet(options?: any) {
        return EmployeeApiFp(this.configuration).apiEmployeesGet(options)(this.fetch, this.basePath);
    }

}
